@PART[*]:HAS[@MODULE[ModuleResourceConverter]]:NEEDS[Kerbalism,SystemHeat]:BEFORE[KerbalismDefault]
{
	@MODULE[ModuleResourceConverter],*
	{
		@name = SystemHeatConverterKerbalism
	}
}
@PART[*]:HAS[@MODULE[SystemHeatConverterKerbalism]]:NEEDS[Kerbalism,SystemHeat]:AFTER[KerbalismDefault]
{
	@MODULE[SystemHeatConverterKerbalism],*
	{
		@name = ModuleResourceConverter
	}
}

@PART[*]:HAS[@MODULE[ModuleSystemHeatConverter]]:NEEDS[Kerbalism,SystemHeat]:FOR[zzzz_SystemHeat]
{
	@MODULE[ModuleSystemHeatConverter],*
	{
		@name = SystemHeatConverterKerbalism
	}
}

@PART[*]:HAS[@MODULE[Reliability]:HAS[#type[ModuleResourceConverter]]]:NEEDS[FeatureReliability,SystemHeat]:AFTER[KerbalismDefault]
{
	@MODULE[Reliability]:HAS[#type[ModuleResourceConverter]]
	{
		@type = SystemHeatConverterKerbalism
	}
}

// Generic converters
@PART[*]:HAS[@MODULE[ModuleResourceConverter]:HAS[@INPUT_RESOURCE:HAS[#ResourceName[ElectricCharge]],#ConverterName]]:NEEDS[Kerbalism,SystemHeat]:FOR[zzzz_SystemHeat]
{
	!MODULE[ModuleCoreHeat] {}
	%MODULE[ModuleSystemHeat]
	{
		%name = ModuleSystemHeat
		// Cubic metres
		%volume = #$/mass$ //1 ton equals 1 cubic meter of cooling. it *very roughly* approximates the balance of squads ISRU
		%moduleID = isru
		%iconName = Icon_Gears
	}

	!MODULE[ModuleOverheatDisplay] {}

	@MODULE[ModuleResourceConverter]:HAS[@INPUT_RESOURCE:HAS[#ResourceName[ElectricCharge]],#ConverterName]
	{
		@name = SystemHeatConverterKerbalism
		moduleID = #$ConverterName$ //this should be the localization string or the actual name, either way, unique.
		systemHeatModuleID = isru
		shutdownTemperature = 800
		systemOutletTemperature = 600 // temp for freeing water from hydrate regolith. other values could be: 400k for production of hydrazine, 5-600k for decomposition of hydrates, 700 for sabatier process, 373-1000k for high temp electrolysis of water.
		systemEfficiency
		{
			key = 0 0.0
			key = 300 1.0
			key = 1000 1.0
			key = 1300 0.0
		}
		systemPower = #$INPUT_RESOURCE:HAS[#ResourceName[ElectricCharge]]/Ratio$ //set the heat ouput as proportional to the EC usage.
		@systemPower *= .90 //lets assume 90% of EC usage turns into heat.
		!ThermalEfficiency {}
		!TemperatureModifier {}
		@GeneratesHeat = false //disable stock heating
	}
}
